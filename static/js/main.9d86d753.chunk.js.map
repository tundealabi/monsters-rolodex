{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","data","id","name","email","className","alt","src","CardList","mapMonsters","monsters","map","monster","SearchField","searchField","search","handleChange","type","placeholder","value","onChange","App","evet","target","setState","state","a","fetch","fetchResult","json","response","filteredMonster","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAceA,G,MAXF,SAACC,GAAW,IAAD,EACWA,EAAxBC,KAAMC,EADO,EACPA,GAAGC,EADI,EACJA,KAAKC,EADD,EACCA,MACrB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAA1B,4BACtB,6BAAKC,IACL,4BAAIC,SCQDI,G,MAbE,SAACR,GAAW,IAEnBS,EADaT,EAAZU,SACsBC,KAAI,SAAAC,GAAO,OACxC,cAAC,EAAD,CAAuBX,KAAMW,GAAlBA,EAAQV,OAGnB,OACI,qBAAKG,UAAU,YAAf,SACKI,MCIEI,G,MAbK,SAACb,GAAW,IACdc,EAA4Bd,EAAnCe,OAAmBC,EAAgBhB,EAAhBgB,aAC1B,OACI,uBAAOX,UAAU,aACjBF,KAAK,cACLc,KAAK,SACLC,YAAY,kBACZC,MAAOL,EACPM,SAAUJ,MC4BHK,G,wDAjCb,aAAe,IAAD,8BACZ,gBAaFL,aAAe,SAACM,GAAS,IAAD,EACDA,EAAKC,OAAnBpB,EADe,EACfA,KAAKgB,EADU,EACVA,MACZ,EAAKK,SAAL,eAAgBrB,EAAMgB,KAdtB,EAAKM,MAAQ,CACXf,SAAS,GACTI,YAAY,IAJF,E,gEAOO,IAAD,OAClB,sBAAC,8BAAAY,EAAA,sEAC2BC,MAAM,8CADjC,cACOC,EADP,gBAEwBA,EAAYC,OAFpC,OAEOC,EAFP,OAGG,EAAKN,SAAS,CAACd,SAASoB,IAH3B,0CAAD,K,+BAUQ,IAAD,OACDC,EAAkBC,KAAKP,MAAMf,SAASuB,QAAO,SAAArB,GACjD,OAAOA,EAAQT,KAAK+B,cAAcC,SAAS,EAAKV,MAAMX,YAAYoB,kBAEpE,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAaU,OAAQiB,KAAKP,MAAMX,YAAaE,aAAcgB,KAAKhB,eAC/De,EAAgBK,OAAS,cAAC,EAAD,CAAU1B,SAAUqB,IAAqB,6D,GA3BzDM,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d86d753.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nimport React from 'react';\r\nimport \"./card.style.css\";\r\nconst Card = (props) => {\r\n    const {data:{id,name,email}} = props;\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${id}?set=set2&size=180x180`}/>\r\n            <h3>{name}</h3>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from \"../card/card.component\";\r\nimport \"./card-list.style.css\";\r\n\r\nconst CardList = (props) => {\r\n    const {monsters} = props;\r\n    const mapMonsters = monsters.map(monster=> (\r\n    <Card key={monster.id} data={monster}/>\r\n        )\r\n    )    \r\n    return (\r\n        <div className=\"card-list\">\r\n            {mapMonsters}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport \"./search-box.style.css\";\r\n\r\nconst SearchField = (props) => {\r\n    const {search:searchField,handleChange} = props;\r\n    return (\r\n        <input className=\"search-box\" \r\n        name=\"searchField\"\r\n        type=\"search\"\r\n        placeholder=\"Search Monsters\"\r\n        value={searchField}\r\n        onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchField;","import React,{Component} from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchField from \"./components/search-box/search-box.component\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters:[],\n      searchField:\"\"\n    }\n  }\n  componentDidMount() {\n    (async()=>{\n      const fetchResult = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const response = await fetchResult.json();\n        this.setState({monsters:response});  \n    })(); \n  }\n  handleChange = (evet) =>{\n    const {name,value} = evet.target\n    this.setState({[name]:value});\n  }\n  render() {\n    const filteredMonster = this.state.monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    })\n    return(\n      <div className=\"App\">\n        <h1>MONSTERS ROLODEX</h1>\n        <SearchField search={this.state.searchField} handleChange={this.handleChange}/>\n        {filteredMonster.length ? <CardList monsters={filteredMonster}/> : <h1>No Monster..........</h1>}\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}